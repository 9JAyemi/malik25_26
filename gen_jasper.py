#!/usr/bin/env python3
# Generate JasperGold TCL + filelist, with outputs under out_base/<design>/

import argparse, os, sys, fnmatch, pathlib, re
from typing import List, Set

RTL_EXTS = (".sv", ".svh", ".v", ".vh")
DEFAULT_EXCLUDES = [
    "*/.git/*","*/.hg/*","*/.svn/*",
    "*/build/*","*/out/*","*/.cache/*",
    "*/target/*","*/vendor/*",
]

def parse_args():
    p = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    p.add_argument("--root", required=True, nargs="+",
                   help="Root directory (or directories) to scan for RTL.")
    p.add_argument("--top", required=True, help="Top module name (or wrapper).")
    p.add_argument("--props", default=None,
                   help="Assertions/property file (e.g., props_bind.sv or wrapper.sv).")
    p.add_argument("--out_base", default="formal_out",
                   help="Base output dir. Final path is out_base/<design>/")
    p.add_argument("--design", default=None,
                   help="Design name used for output subdir (e.g., 'ibex'). If omitted, derived from first --root.")
    p.add_argument("--incdir", nargs="*", default=[],
                   help="Extra include dirs to add (+incdir+).")
    p.add_argument("--define", nargs="*", default=[],
                   help="Macros like FORMAL=1 DEBUG or NAME=VALUE (no +define+ prefix).")
    p.add_argument("--exclude", nargs="*", default=DEFAULT_EXCLUDES,
                   help="Glob patterns to exclude from scan.")
    p.add_argument("--blackbox", nargs="*", default=[],
                   help="Module name patterns to black-box (wildcards ok).")
    p.add_argument("--clk", default=None, help="Clock name (optional).")
    p.add_argument("--period", type=float, default=10.0, help="Clock period (ns) if --clk given.")
    p.add_argument("--rst", default=None, help="Reset name (optional).")
    p.add_argument("--rst_active", choices=["low","high"], default="low",
                   help="Reset polarity if --rst given.")
    return p.parse_args()

def is_excluded(path: str, patterns: List[str]) -> bool:
    return any(fnmatch.fnmatch(path, pat) for pat in patterns)

def collect_files(roots: List[str], excludes: List[str]) -> List[str]:
    files = []
    for root in roots:
        root = os.path.abspath(root)
        for dirpath, dirnames, filenames in os.walk(root):
            full_dir = os.path.abspath(dirpath)
            if is_excluded(full_dir + os.sep, excludes):
                dirnames[:] = []
                continue
            for fn in filenames:
                full = os.path.join(full_dir, fn)
                if is_excluded(full, excludes): continue
                if full.lower().endswith(RTL_EXTS):
                    files.append(full.replace("\\","/"))
    return sorted(files)

def infer_incdirs(files: List[str], extra: List[str]) -> List[str]:
    incs: Set[str] = set()
    for f in files:
        if f.endswith((".svh",".vh")):
            incs.add(os.path.dirname(f))
    for e in extra:
        incs.add(os.path.abspath(e))
    return sorted(incs)

def maybe_detect_top(files: List[str], user_top: str) -> str:
    mod_decl = re.compile(r"^\s*module\s+([a-zA-Z_]\w*)\b", re.MULTILINE)
    seen = False
    for f in files:
        if not f.endswith((".sv",".v")): continue
        try:
            with open(f,"r",errors="ignore") as fh:
                if user_top in fh.read():
                    seen = True; break
        except Exception:
            pass
    if not seen:
        print(f"[WARN] Top '{user_top}' not seen in scanned files (ok if using wrapper/bind).", file=sys.stderr)
    return user_top

def slug(s: str) -> str:
    s = re.sub(r"[^\w.-]+","_", s.strip())
    return s or "design"

def derive_design_name(roots: List[str], user: str|None) -> str:
    if user: return slug(user)
    # default: last directory name of first root
    base = os.path.basename(os.path.abspath(roots[0]))
    return slug(base)

def write_filelist(outdir: str, files: List[str], incdirs: List[str],
                   defines: List[str], props: str|None) -> str:
    os.makedirs(outdir, exist_ok=True)
    fl = os.path.join(outdir, "filelist.f")
    with open(fl, "w") as f:
        for inc in incdirs: f.write(f"+incdir+{inc}\n")
        for d in defines:  f.write(f"+define+{d if '=' in d else d+'=1'}\n")
        for fp in files:   f.write(fp + "\n")
        if props:          f.write(os.path.abspath(props).replace("\\","/") + "\n")
    return fl

def write_jasper_tcl(outdir: str, top: str, filelist_path: str,
                     blackboxes: List[str], clk: str|None, period: float,
                     rst: str|None, rst_active: str) -> str:
    os.makedirs(os.path.join(outdir, "results"), exist_ok=True)
    tcl = os.path.join(outdir, "run_jasper.tcl")
    with open(tcl,"w") as t:
        t.write("# Auto-generated by gen_jasper_tcl.py\n")
        t.write("project new work\n")
        t.write("set_attribute hdl_verilog_standard v2001\n")
        t.write("set_attribute hdl_systemverilog on\n")
        t.write(f"read_file -format sverilog -f {filelist_path}\n")
        t.write(f"set_top {top}\n")
        t.write("elaborate\n\n")
        if blackboxes:
            pats = " ".join(blackboxes)
            t.write(f"set_blackbox -module {{{pats}}}\n\n")
        if clk: t.write(f"clock {clk} -period {period}\n")
        if rst: t.write(f"reset {rst} {'-low' if rst_active=='low' else '-high'}\n")
        t.write("\nprove -all\n")
        t.write("report_property -all -failed   -outfile results/failed.rpt\n")
        t.write("report_property -all -proven   -outfile results/proven.rpt\n")
        t.write("report_assumptions              -outfile results/assumptions.rpt\n")
        t.write("report_undetermined             -outfile results/undetermined.rpt\n")
        t.write("exit\n")
    return tcl

def main():
    args = parse_args()
    files = collect_files(args.root, args.exclude)
    if not files:
        print("[ERROR] No RTL files found. Adjust --root/--exclude.", file=sys.stderr); sys.exit(1)
    if args.props and not os.path.isfile(args.props):
        print(f"[ERROR] --props not found: {args.props}", file=sys.stderr); sys.exit(2)

    incdirs = infer_incdirs(files, args.incdir)
    top = maybe_detect_top(files, args.top)
    design = derive_design_name(args.root, args.design)
    outdir = os.path.join(args.out_base, design)

    fl  = write_filelist(outdir, files, incdirs, args.define, args.props)
    tcl = write_jasper_tcl(outdir, top, fl, args.blackbox, args.clk, args.period, args.rst, args.rst_active)

    print(f"[OK] Design: {design}")
    print(f"     filelist: {fl}")
    print(f"     tcl     : {tcl}")
    print(f"Run:\n  jaspergold -tcl {tcl}")

if __name__ == "__main__":
    import re
    main()
